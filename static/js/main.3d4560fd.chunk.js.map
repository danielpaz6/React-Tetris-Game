{"version":3,"sources":["utils/gameHelpers.js","utils/collisionDetection.js","components/Cell/StyledCell.js","utils/tetrominos.js","components/Cell/Cell.js","components/Stage/StyledStage.js","components/Stage/Stage.js","components/Instructions/StyledInstructions.js","components/Instructions/Instructions.js","components/Tetris/StyledTetris.js","hooks/useEventListener.js","hooks/useStage.js","components/Tetris/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/setInterval.js","App.js","serviceWorker.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","StyledStage","height","width","map","row","cell","Cell","key","StyledInstructions","instructions","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","accumilator","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","gameOver","setGameOver","colided","setPlayer","useCallback","STAGE_WIDTH","dir","clonedPlayer","JSON","parse","stringify","matrix","rotatedTetro","_","index","col","reverse","rotate","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","handleStartGame","drop","console","log","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","eventName","handler","element","window","savedHandler","addEventListener","eventListener","event","removeEventListener","useEventListener","keyCode","Instructions","Stage","Fragment","Card","style","Body","Button","variant","onClick","Header","ListGroup","Item","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d4560fd.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => \r\n\tArray.from(Array(STAGE_HEIGHT), () => \r\n\t\tnew Array(STAGE_WIDTH).fill([0, 'clear'])\r\n\t)","export const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\r\n\tfor(let y = 0; y < player.tetromino.length; y++) {\r\n\t\tfor(let x = 0; x < player.tetromino[0].length; x++) {\r\n\t\t\t// 1. Check that we are on actual Tetromino cell\r\n\t\t\tif(player.tetromino[y][x] !== 0) {\r\n\t\t\t\tif(\r\n\t\t\t\t// 2. Check that our move is inside the game areas height (y)\r\n\t\t\t\t!stage[y + player.pos.y + moveY] || \r\n\t\t\t\t// 3. Check that our move is inside the game areas width (x)\r\n\t\t\t\t!stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n\t\t\t\t// 4. Check that the cell we're moving to isn't set to clear\r\n\t\t\t\tstage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n\t\t\t\t)\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\twidth: auto;\r\n\tbackground: rgba(${props => props.color}, 0.9); /* maybe 0.8 */\r\n\tborder: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n\tborder-bottom-color: rgba(${props => props.color}, 0.1);\r\n\tborder-right-color: rgba(${props => props.color}, 1);\r\n\tborder-top-color: rgba(${props => props.color}, 1);\r\n\tborder-left-color: rgba(${props => props.color}, 0.3);\r\n`;","export const TETROMINOS = {\r\n\t0: {shape: [[0]], color: '246, 246, 246'},\r\n\tI: {\r\n\t\tshape: [\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0]\r\n\t\t],\r\n\t\tcolor: '80, 227, 230'\r\n\t},\r\n\tJ: {\r\n\t\tshape: [\r\n\t\t\t[0, 'J', 0],\r\n\t\t\t[0, 'J', 0],\r\n\t\t\t['J', 'J', 0]\r\n\t\t],\r\n\t\tcolor: '36, 95, 223'\r\n\t},\r\n\tL: {\r\n\t\tshape: [\r\n\t\t\t[0, 'L', 0],\r\n\t\t\t[0, 'L', 0],\r\n\t\t\t[0, 'L', 'L']\r\n\t\t],\r\n\t\tcolor: '223, 173, 36'\r\n\t},\r\n\tO: {\r\n\t\tshape: [\r\n\t\t\t['O', 'O'],\r\n\t\t\t['O', 'O']\r\n\t\t],\r\n\t\tcolor: '223, 217, 36'\r\n\t},\r\n\tS: {\r\n\t\tshape: [\r\n\t\t\t[0, 'S', 'S'],\r\n\t\t\t['S', 'S', 0],\r\n\t\t\t[0, 0, 0]\r\n\t\t],\r\n\t\tcolor: '48, 211, 56'\r\n\t},\r\n\tT: {\r\n\t\tshape: [\r\n\t\t\t[0, 0, 0],\r\n\t\t\t['T', 'T', 'T'],\r\n\t\t\t[0, 'T', 0]\r\n\t\t],\r\n\t\tcolor: '132, 61, 19'\r\n\t},\r\n\tZ: {\r\n\t\tshape: [\r\n\t\t\t['Z', 'Z', 0],\r\n\t\t\t[0, 'Z', 'Z'],\r\n\t\t\t[0, 0, 0]\r\n\t\t],\r\n\t\tcolor: '227, 78, 78'\r\n\t}\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n\tconst tetrominos = 'IJLOSTZ';\r\n\tconst randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n\treturn TETROMINOS[randTetromino];\r\n}","import React from 'react';\r\nimport { StyledCell } from './StyledCell';\r\nimport { TETROMINOS } from '../../utils/tetrominos';\r\n\r\nconst cell = ({ type }) => (\r\n\t<StyledCell type={type} color={TETROMINOS[type].color} />\r\n)\r\n\r\nexport default React.memo(cell);","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(\r\n\t\t${props => props.height},\r\n\t\t25px\r\n\t);\r\n\tgrid-template-columns: repeat(${props => props.width}, 25px);\r\n\tgrid-gap: 1px;\r\n\tborder: 2px solid #ccc;\r\n\tborder-radius: 4px;\r\n\tmax-width: calc(25px * ${props => props.width} + 15);\r\n\tbackground: #eee;\r\n`;","import React from 'react';\r\nimport Cell from '../Cell/Cell';\r\nimport {StyledStage} from './StyledStage';\r\n\r\nconst stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n\t\t{stage.map(row => \r\n\t\t\t\r\n\t\t\t\trow.map((cell, x) => \r\n\t\t\t\t\t<Cell key={x} type={cell[0]} />\r\n\t\t\t\t)\r\n\t\t\t\r\n\t\t)}\r\n    </StyledStage>\r\n);\r\n\r\nexport default stage;","import styled from 'styled-components';\r\n\r\nexport const StyledInstructions = styled.div`\r\n\tposition: absolute;\r\n\twidth: 315px;\r\n\tmargin-top: 50px;\r\n\tpadding: 15px;\r\n\ttext-align: center;\r\n\tbackground: linear-gradient(90deg, \r\n\t\trgba(235,236,237,0) 0%,\r\n\t\trgba(255,255,255,0.9) 50%,\r\n\t\trgba(235,236,237,0) 100%\r\n\t);\r\n\r\n\tkbd {\r\n\t\tdisplay: inline-block;\r\n\t\tmargin: 0 .1em;\r\n\t\tpadding: .1em .6em;\r\n\t\tfont-family: Arial,\"Helvetica Neue\",Helvetica,sans-serif;\r\n\t\tfont-size: 11px;\r\n\t\tline-height: 1.4;\r\n\t\tcolor: #242729;\r\n\t\ttext-shadow: 0 1px 0 #fff;\r\n\t\tbackground-color: #e1e3e5;\r\n\t\tborder: 1px solid #adb3b8;\r\n\t\tborder-radius: 3px;\r\n\t\tbox-shadow: 0 1px 0 rgba(12,13,14,0.7), 0 0 0 2px #fff inset;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\tp {\r\n\t\tfont-size: 10px;\r\n\t\tmargin-top: 30px;\r\n\t}\r\n`;","import React from 'react';\r\nimport { StyledInstructions } from \"./StyledInstructions\";\r\n\r\nconst instructions = () => (\r\n\t<StyledInstructions>\r\n\t\tPress <kbd>Space</kbd> to start.\r\n\r\n\t\t<p><kbd>&#8678;</kbd> <kbd>&#8680;</kbd> to move right and left.</p>\r\n\t\t<p><kbd>&#8679;</kbd> to rotate the shape.</p>\r\n\t</StyledInstructions>\r\n)\r\n\r\nexport default instructions;","import styled from \"styled-components\";\r\n\r\n\r\nexport const StyledTetris = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n\tmargin: auto;\r\n\tmargin-top: 15px;\r\n\twidth: 630px;\r\n\r\n\taside {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 200px;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0 20px;\r\n\t}\r\n`;","import { useRef, useEffect } from 'react';\r\n\r\n// Hook from https://usehooks.com/useEventListener/\r\nexport const useEventListener = (eventName, handler, element = window) => {\r\n\t// Create a ref that stores handler\r\n\tconst savedHandler = useRef();\r\n\t\r\n\t// Update ref.current value if handler changes.\r\n\t// This allows our effect below to always get latest handler ...\r\n\t// ... without us needing to pass it in effect deps array ...\r\n\t// ... and potentially cause effect to re-run every render.\r\n\tuseEffect(() => {\r\n\t  savedHandler.current = handler;\r\n\t}, [handler]);\r\n  \r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// Make sure element supports addEventListener\r\n\t\t\t// On \r\n\t\t\tconst isSupported = element && element.addEventListener;\r\n\t\t\tif (!isSupported) return;\r\n\r\n\t\t\t// Create event listener that calls handler function stored in ref\r\n\t\t\tconst eventListener = event => savedHandler.current(event);\r\n\r\n\t\t\t// Add event listener\r\n\t\t\telement.addEventListener(eventName, eventListener);\r\n\r\n\t\t\t// Remove event listener on cleanup\r\n\t\t\treturn () => {\r\n\t\t\t\telement.removeEventListener(eventName, eventListener);\r\n\t\t\t};\r\n\t\t},\r\n\t\t[eventName, element] // Re-run if eventName or element changes\r\n\t);\r\n};","import { useState, useEffect } from 'react';\r\nimport { createStage } from \"../utils/gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\tconst [stage, setStage] = useState(createStage());\r\n\tconst [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetRowsCleared(0);\r\n\r\n\t\tconst sweepRows = newStage =>\r\n\t\t\tnewStage.reduce((accumilator, row) => {\r\n\t\t\t\t// If true, we haven't found a value of zero.\r\n\t\t\t\t// Therefore it's a full row and it should be cleared.\r\n\t\t\t\tif(row.findIndex(cell => cell[0] === 0) === -1) {\r\n\t\t\t\t\t//console.log(\"Activate findIndex Reduce\", row, accumilator);\r\n\t\t\t\t\tsetRowsCleared(prev => prev + 1);\r\n\r\n\t\t\t\t\t// The accumilator is the new array we building up inside the reduce function.\r\n\t\t\t\t\t// unshift function let us add a new value to the array at the beginning of the array\r\n\t\t\t\t\t// that's what will create the illusion of pushing the game down\r\n\t\t\t\t\taccumilator.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\taccumilator.push(row)\r\n\r\n\t\t\t\treturn accumilator;\r\n\t\t\t}, []);\r\n\r\n\t\tconst updateStage = prevStage => {\r\n\t\t\t// First flush the stage\r\n\t\t\tconst newStage = prevStage.map(row => \r\n\t\t\t\trow.map(cell => (\r\n\t\t\t\t\tcell[1] === 'clear' ? [0, 'clear'] : cell\r\n\t\t\t\t))\r\n\t\t\t)\r\n\r\n\t\t\t// Then draw the tetromino\r\n\t\t\tplayer.tetromino.forEach((row, y) => {\r\n\t\t\t\trow.forEach((value, x) => {\r\n\t\t\t\t\tif(value !== 0 ) {\r\n\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// Then check if we collided\r\n\t\t\tif(player.collided) {\r\n\t\t\t\tresetPlayer();\r\n\t\t\t\treturn sweepRows(newStage);\r\n\t\t\t}\r\n\r\n\t\t\treturn newStage;\r\n\t\t};\r\n\r\n\t\tsetStage(prev => updateStage(prev));\r\n\r\n\t}, [player, resetPlayer]);\r\n\r\n\treturn [stage, setStage, rowsCleared];\r\n}","import React, { useState } from 'react';\r\n\r\nimport { createStage } from '../../utils/gameHelpers';\r\nimport { checkCollision } from '../../utils/collisionDetection';\r\n\r\n// Components\r\nimport Stage from '../Stage/Stage';\r\nimport Instructions from \"../Instructions/Instructions\";\r\n\r\n// Styled Components\r\nimport { StyledTetris } from \"./StyledTetris\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\n// Custom Hooks\r\nimport { useInterval } from \"../../hooks/setInterval\";\r\nimport { useEventListener } from \"../../hooks/useEventListener\";\r\nimport { usePlayer } from '../../hooks/usePlayer';\r\nimport { useStage } from '../../hooks/useStage';\r\nimport { useGameStatus } from '../../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n\r\n\tconst [dropTime, setDropTime] = useState(null);\r\n\tconst [gameOver, setGameOver] = useState(false);\r\n\r\n\tconst [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n\tconst [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n\t\r\n\tconst [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n\tconst movePlayer = dir => {\r\n\t\tif(!checkCollision(player, stage, {x: dir, y: 0}))\r\n\t\t\tupdatePlayerPos({ x: dir, y: 0 });\r\n\t}\r\n\r\n\tconst handleStartGame = () => {\r\n\t\t// Reset everything\r\n\t\tsetStage(createStage());\r\n\t\tsetDropTime(700);\r\n\t\tresetPlayer();\r\n\t\tsetGameOver(false);\r\n\t\tsetScore(0);\r\n\t\tsetRows(0);\r\n\t\tsetLevel(0);\r\n\t}\r\n\r\n\tconst drop = () => {\r\n\t\t// Increase level when player has cleared 10 rows\r\n\t\tif (rows > (level + 1) * 10) {\r\n\t\t\t// Increase the level\r\n\t\t\tsetLevel(prev => prev + 1);\r\n\r\n\t\t\t// Increase the speed\r\n\t\t\tsetDropTime(700 / (level + 1) + 200);\r\n\t\t}\r\n\r\n\t\tif(!checkCollision(player, stage, {x: 0, y: 1}))\r\n\t\t\tupdatePlayerPos({x: 0, y: 1, collided: false});\r\n\t\telse {\r\n\t\t\t// Game Over\r\n\t\t\t if(player.pos.y < 1) {\r\n\t\t\t\tconsole.log(\"Game Over!\");\r\n\t\t\t\tsetGameOver(true);\r\n\t\t\t\tsetDropTime(null);\r\n\t\t\t }\r\n\r\n\t\t\tupdatePlayerPos({x: 0, y: 0, collided: true});\r\n\t\t}\r\n\t}\r\n\r\n\tconst dropPlayer = () => {\r\n\t\tdrop();\r\n\t}\r\n\r\n\tconst move = ({ keyCode }) => {\r\n\t\tif(!gameOver) {\r\n\t\t\tswitch(keyCode) {\r\n\t\t\t\tcase 32: if(dropTime === null) handleStartGame(); break; // Space\r\n\t\t\t\tcase 37: movePlayer(-1); break; // Left\r\n\t\t\t\tcase 39: movePlayer(1); break; // Right\r\n\t\t\t\tcase 40: dropPlayer(); break; // Down\r\n\t\t\t\tcase 38: playerRotate(stage, 1); break; // Up\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tuseInterval(() => {\r\n\t\tdrop();\r\n\t}, dropTime);\r\n\r\n\t// Add event listener to the window element\r\n\tuseEventListener('keydown', move);\r\n\r\n\treturn (\r\n\t\t<StyledTetris>\r\n\t\t\t{dropTime === null ? <Instructions /> : null}\r\n\t\t\t<Stage stage={stage} />\r\n\t\t\t<aside>\r\n\t\t\t\t{gameOver ? (\r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<Card style={{ width: '18rem' }}>\r\n\t\t\t\t\t\t\t<Card.Body>Game Over</Card.Body>\r\n\t\t\t\t\t\t</Card><br />\r\n\t\t\t\t\t\t<Button variant=\"primary\" onClick={handleStartGame}>Start a new game</Button>\r\n\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Card style={{ width: '18rem' }}>\r\n\t\t\t\t\t\t<Card.Header>Game Status</Card.Header>\r\n\t\t\t\t\t\t<ListGroup variant=\"flush\">\r\n\t\t\t\t\t\t\t<ListGroup.Item>Score: {score}</ListGroup.Item>\r\n\t\t\t\t\t\t\t<ListGroup.Item>Rows: {rows}</ListGroup.Item>\r\n\t\t\t\t\t\t\t<ListGroup.Item>Level: {level}</ListGroup.Item>\r\n\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t</Card><br />\r\n\t\t\t\t\t<Button variant=\"primary\" onClick={handleStartGame}>Start a game</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</aside>\r\n\t\t</StyledTetris>\r\n\t);\r\n};\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\nimport { TETROMINOS, randomTetromino } from '../utils/tetrominos';\r\nimport { STAGE_WIDTH } from '../utils/gameHelpers';\r\nimport { checkCollision } from '../utils/collisionDetection';\r\n\r\nexport const usePlayer = () => {\r\n\tconst [player, setPlayer] = useState({\r\n\t\tpos: {x: 0, y: 0},\r\n\t\ttetromino: TETROMINOS[0].shape,\r\n\t\tcolided: false\r\n\t});\r\n\r\n\tconst rotate = (matrix, dir) => {\r\n\t\t// Transpose the matrix\r\n\t\tconst rotatedTetro = matrix.map((_, index) => \r\n\t\t\tmatrix.map(col => col[index])\r\n\t\t);\r\n\r\n\t\t// Reverse each row to get rotated matrix\r\n\t\tif(dir > 0) return rotatedTetro.map(row => row.reverse());\r\n\t\t\r\n\t\t// Otherwise, the opposite direction\r\n\t\treturn rotatedTetro.reverse();\r\n\t};\r\n\r\n\tconst playerRotate = (stage, dir) => {\r\n\t\t// Deep copy of the player\r\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\t\t\r\n\t\t//const pos = clonedPlayer.pos.x;\r\n\t\tlet offset = 1;\r\n\r\n\t\t// Back and forth movement the tetromino to check for side collition while rotating\r\n\t\twhile(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\r\n\t\t\tclonedPlayer.pos.x += offset;\r\n\t\t\toffset = -(offset + (offset > 0 ? 1 : -1));\r\n\r\n\t\t\tif(offset > clonedPlayer.tetromino[0].length) {\r\n\t\t\t\t// Cannot rotate because it will collide with something else, hence,\r\n\t\t\t\t// we'll return so we won't setPlayer to the rotated tetromino.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetPlayer(clonedPlayer);\r\n\t}\r\n\r\n\tconst updatePlayerPos = ({ x, y, collided }) => {\r\n\t\tsetPlayer(prev => ({\r\n\t\t  ...prev,\r\n\t\t  pos: { x: (prev.pos.x + x), y: (prev.pos.y + y)},\r\n\t\t  collided,\r\n\t\t}))\r\n\t  }\r\n\r\n\tconst resetPlayer = useCallback(() => {\r\n\t\tsetPlayer({\r\n\t\t\tpos: {\r\n\t\t\t\tx: STAGE_WIDTH / 2 - 2,\r\n\t\t\t\ty: 0\r\n\t\t\t},\r\n\t\t\ttetromino: randomTetromino().shape,\r\n\t\t\t//tetromino: TETROMINOS[\"I\"].shape,\r\n\t\t\tcollided: false\r\n\t\t});\r\n\t}, []);\r\n\r\n\r\n\treturn [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [rows, setRows] = useState(0);\r\n\tconst [level, setLevel] = useState(0);\r\n\r\n\tconst linePoints = [40, 100, 300, 1200];\r\n\r\n\tconst calcScore = useCallback(() => {\r\n\t\t// Checks if any rows has been cleared, if it does, then we would score up\r\n\t\t// according to the linePoints array ( the original tetris scoring )\r\n\t\tif(rowsCleared > 0) {\r\n\t\t\tsetScore(prev => prev + linePoints[(rowsCleared > 4 ? 4 : rowsCleared) - 1] * (level + 1));\r\n\t\t\tsetRows(prev => prev + rowsCleared);\r\n\t\t}\r\n\t}, [level, linePoints, rowsCleared]);\r\n\r\n\tuseEffect(() => {\r\n\t\tcalcScore();\r\n\t}, [calcScore, rowsCleared, score]);\r\n\r\n\treturn [score, setScore, rows, setRows, level, setLevel];\r\n};","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport Tetris from './components/Tetris/Tetris';\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Tetris />\n\t</div>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}